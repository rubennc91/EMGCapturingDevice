/*****************************************************************************/
/**
* @file main.c
* This file contains a design example using the Spi driver for ADS1298R.
*
******************************************************************************/

/***************************** Include Files *********************************/

#include "xparameters.h"	/* XPAR parameters */
#include "xspi.h"			/* SPI device driver */
#include "xil_exception.h"
#include "xil_printf.h"
#include "ads1298r_api.h"
#include "spi_api.h"
#include "gic_api.h"

#include "xtime_l.h"

// data
uint8_t hasNewData = 0;
ads_data_t *adsData;

uint32_t test_time;

XTime gbl_time_before_test;
XTime *p_gbl_time_before_test = &gbl_time_before_test;
XTime gbl_time_after_test;
XTime *p_gbl_time_after_test = &gbl_time_after_test;
uint32_t dataCount;

/****************************************************************************
*
* Main function to call the Spi interrupt example.
* @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
*
******************************************************************************/
int main(void)
{
	int Status;
	uint8_t adsID;
	uint8_t readDATA;

	xil_printf("[INFO] Init ADS Example\r\n");

	ADS_begin();

	// It is not need. Only for example purposes
	xil_printf("[INFO] Example: reset value for all registers without reset command\r\n");
	ADS_setAllRegisterToReset();

	// Read ADS129x ID: 0xD2 for ADS1298R
	Status = SPIreadREGISTER(REGID_REG_ADDR, &adsID);
	if (Status != 0) {
		xil_printf("[ERROR] SPI Configuration Failed\r\n");
	}
	// Check ADS ID
	xil_printf("[INFO] Data read at ID_REG (Used: 0x%x): 0x%x \r\n", REGID_ID_ADS1298R, adsID);


	xil_printf("[INFO] Set sampling read to 1 kHz and low-power mode\r\n");
	xil_printf("[INFO] Keep in mind that when config1 or resp registers are changed, internal reset is performed. See the datasheet, section Reset\r\n");
	Status = SPIreadREGISTER(CONFIG1_REG_ADDR, &readDATA);
	xil_printf("[INFO] The previous value CONFIG1 register is: 0x%x \r\n", readDATA);

	// By default, ADS12xx is in low-power consumption and with a sample frequency of 250 Hz
	SPIwriteREGISTER(CONFIG1_REG_ADDR, CONFIG1_HIGH_RES_8k_SPS);
	Status = SPIreadREGISTER(CONFIG1_REG_ADDR, &readDATA);
 	xil_printf("[INFO] The new value CONFIG1 register is (Configured 0x%x): 0x%x \r\n", CONFIG1_HIGH_RES_8k_SPS, readDATA);

	// Setup of my circuit. In my case, it hadn't external reference,
	xil_printf("[INFO] Enabling internal reference buffer --> set PD_REFBUF to 1\r\n");
	// If you change individual bits with constants B_xx, you must add with the RESERVED_BITS constant value to be sure that you will
	// write the right bits in the reserved bits in the register.
	// Remember to write all desired configuration in a register  simultaneously. When you write a register, you delete all previous values
	SPIwriteREGISTER(CONFIG3_REG_ADDR, CONFIG3_B_PD_REFBUF | CONFIG3_RESERVED_BITS);

	// Wait for internal reference to wake up. See page 15, section Electrical Characteristics in the datasheet,
	usleep(150000); // 150 ms

	// Select test signal from chip
	// As example, this 2 methods will keep the SPI open for ADS129x chip for faster configuration. The difference It's not noticeable for humans
	// Be careful when you use this option. Read the documentation before using it.
	SPIwriteREGISTER(CONFIG2_REG_ADDR, CONFIG2_TEST_SOURCE_INTERNAL);
	// We will use the square signal at 4 Hz
	SPIwriteREGISTER(CONFIG2_REG_ADDR, CONFIG2_TEST_FREQ_4HZ);

	xil_printf("[INFO] Starting channels configuration.\r\n");
	xil_printf("[INFO] Channel 1: gain 1 and test signal as input.\r\n");
	ADS_enableChannelAndSetGain(1, CHNSET_GAIN_6X, CHNSET_TEST_SIGNAL);

	xil_printf("[INFO] Channel 2: gain 1 and test signal as input.\r\n");
	ADS_enableChannelAndSetGain(2, CHNSET_GAIN_6X, CHNSET_TEST_SIGNAL);

	// xil_printf("[INFO] Channel 3: power-down and its inputs shorted (as Texas Instruments recommends).\r\n");
	xil_printf("[INFO] Channel 3: gain 1 and test signal as input.\r\n");
	//ADS_enableChannelAndSetGain(3, CHNSET_GAIN_6X, CHNSET_ELECTRODE_INPUT);
	ADS_disableChannel(3);

	xil_printf("[INFO] Channel 4 to 8 channel: set gain 1 and test signal as input.\r\n");
	for (uint8_t i = 4; i <= ADS_N_CHANNELS; i++)
		ADS_enableChannelAndSetGain(i, CHNSET_GAIN_6X, CHNSET_ELECTRODE_INPUT);

	xil_printf("[INFO] Starting channels configuration.\r\n");
	SendSPICommandSTART(0);

	// enable interrupts for DRY
	enable_dry_irq();

	// We need to put ADS in DATA or RDATC mode to receive new data
	// Remember that in RDATAC mode, ADS ignores any SPI command sent if it is not SDATAC command
	xil_printf("[INFO] Set ADS chip in read data (RDATAC) mode.\r\n");
	sendSPICommandRDATAC(0);

	xil_printf("[INFO] Start loop obtaining the new data.\r\n");

	// Enable signal ss in SPI
	// XSpi_WriteReg(XPAR_AXI_QUAD_SPI_0_BASEADDR, XSP_SSR_OFFSET, 0xfffffffe);


	while(1){
//		XTime_GetTime(p_gbl_time_after_test);
//	    test_time = (u64) gbl_time_after_test - (u64) gbl_time_before_test;
//
//
//	    if(test_time > 333333333) // 333  1us
//	    {
//	    	xil_printf("[INFO] Data rate is %d.\r\n", dataCount);
//
//	    	dataCount = 0;
//	    	XTime_GetTime(p_gbl_time_before_test);
//	    }

//		if(hasNewData){
//
//			xil_printf("[INFO] New data available.\r\n");
//			hasNewData = 0;
//
//			// Print raw data and format the data
//			xil_printf("Status Word: 0x%x. \r\n", ((adsData->rawData[0] << 16) | (adsData->rawData[1] << 8) | adsData->rawData[2]));
//			xil_printf("Data Ch1: 0x%x. \r\n", ((adsData->rawData[3] << 16) | (adsData->rawData[4] << 8) | adsData->rawData[5]));
//			xil_printf("Data Ch2: 0x%x. \r\n", ((adsData->rawData[6] << 16) | (adsData->rawData[7] << 8) | adsData->rawData[8]));
//			xil_printf("Data Ch3: 0x%x. \r\n", ((adsData->rawData[9] << 16) | (adsData->rawData[10] << 8) | adsData->rawData[11]));
//			xil_printf("Data Ch4: 0x%x. \r\n", ((adsData->rawData[12] << 16) | (adsData->rawData[13] << 8) | adsData->rawData[14]));
//			xil_printf("Data Ch5: 0x%x. \r\n", ((adsData->rawData[15] << 16) | (adsData->rawData[16] << 8) | adsData->rawData[17]));
//			xil_printf("Data Ch6: 0x%x. \r\n", ((adsData->rawData[18] << 16) | (adsData->rawData[19] << 8) | adsData->rawData[20]));
//			xil_printf("Data Ch7: 0x%x. \r\n", ((adsData->rawData[21] << 16) | (adsData->rawData[22] << 8) | adsData->rawData[23]));
//			xil_printf("Data Ch8: 0x%x. \r\n", ((adsData->rawData[24] << 16) | (adsData->rawData[25] << 8) | adsData->rawData[26]));
//
//			// ToDo: Apply transformation.
//
//		}

		if(hasNewData){

			// xil_printf("[INFO] New data available.\r\n");
			hasNewData = 0;

			// Print raw data and format the data
			xil_printf("%d\t", ((adsData->rawData[0] << 16) | (adsData->rawData[1] << 8) | adsData->rawData[2]));
			xil_printf("%d\t", ((adsData->rawData[3] << 16) | (adsData->rawData[4] << 8) | adsData->rawData[5]));
			xil_printf("%d\t", ((adsData->rawData[6] << 16) | (adsData->rawData[7] << 8) | adsData->rawData[8]));
			xil_printf("%d\t", ((adsData->rawData[9] << 16) | (adsData->rawData[10] << 8) | adsData->rawData[11]));
			xil_printf("%d\t", ((adsData->rawData[12] << 16) | (adsData->rawData[13] << 8) | adsData->rawData[14]));
			xil_printf("%d\t", ((adsData->rawData[15] << 16) | (adsData->rawData[16] << 8) | adsData->rawData[17]));
			xil_printf("%d\t", ((adsData->rawData[18] << 16) | (adsData->rawData[19] << 8) | adsData->rawData[20]));
			xil_printf("%d\t", ((adsData->rawData[21] << 16) | (adsData->rawData[22] << 8) | adsData->rawData[23]));
			xil_printf("%d\r\n", ((adsData->rawData[24] << 16) | (adsData->rawData[25] << 8) | adsData->rawData[26]));

			// ToDo: Apply transformation.

		}

//		if(hasNewData){
//
//			// xil_printf("[INFO] New data available.\r\n");
//			hasNewData = 0;
//
//			// Print raw data and format the data
//			// xil_printf("Status Word: 0x%x. \r\n", ((adsData->rawData[0] << 16) | (adsData->rawData[1] << 8) | adsData->rawData[2]));
//			int datach1 = (adsData->rawData[3] << 16) | (adsData->rawData[4] << 8) | (adsData->rawData[5]);
//			int datach2 = (adsData->rawData[6] << 16) | (adsData->rawData[7] << 8) | (adsData->rawData[8]);
//			int datach3 = (adsData->rawData[9] << 16) | (adsData->rawData[10] << 8) | (adsData->rawData[11]);
//			int datach4 = (adsData->rawData[12] << 16) | (adsData->rawData[13] << 8) | (adsData->rawData[14]);
//			int datach5 = (adsData->rawData[15] << 16) | (adsData->rawData[16] << 8) | (adsData->rawData[17]);
//			int datach6 = (adsData->rawData[18] << 16) | (adsData->rawData[19] << 8) | (adsData->rawData[20]);
//			int datach7 = (adsData->rawData[21] << 16) | (adsData->rawData[22] << 8) | (adsData->rawData[23]);
//			int datach8 = (adsData->rawData[24] << 16) | (adsData->rawData[25] << 8) | (adsData->rawData[26]);
//
//			printf("%.4f\t", (5*(float)(datach1))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach2))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach3))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach4))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach5))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach6))/(6*((1<<23)-1)));
//			printf("%.4f\t", (5*(float)(datach7))/(6*((1<<23)-1)));
//			printf("%.4f\r\n", (5*(float)(datach8))/(6*((1<<23)-1)));
//
//			// ToDo: Apply transformation.
//
//		}

		// usleep(1000000);
	}

	// You can could the method end() to free GPIO used pins and resources. if you don't need any more de ADS
	// You have to call begin() if you want to use again the ADS
	ADS_end();

	xil_printf("[INFO] Successfully ran ADS Example.\r\n");
	return XST_SUCCESS;
}


